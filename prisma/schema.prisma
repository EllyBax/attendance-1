// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model representing the Department table
model Department {
  code        String    @id @unique @db.VarChar(10) // Unique department code
  name        String    @db.VarChar(100) // Name of the department
  hodPassword String    @unique
  teachers    Teacher[] // Relation to Teacher model
  students    Student[] // Relation to Student model
  module      Module[]
}

// Model representing the Teacher table
model Teacher {
  id             String       @id @default(uuid()) // UUID as primary key
  name           String       @db.VarChar(100) // Name of the teacher
  departmentCode String // Foreign key referencing Department.id
  department     Department   @relation(fields: [departmentCode], references: [code])
  modules        Module[] // Relation to Module model
  attendance     Attendance[]
}

// Model representing the Classes Table
model Class {
  name     String    @id @unique
  students Student[]
}

// Model representing the Student table
model Student {
  id             String       @id @default(uuid()) // UUID as primary key
  name           String       @db.VarChar(100) // Name of the student
  departmentCode String // Foreign key referencing Department.id
  regnumber      BigInt       @unique
  courseId       Int
  course         Course       @relation(fields: [courseId], references: [id])
  department     Department   @relation(fields: [departmentCode], references: [code])
  attendance     Attendance[]
  Class          Class?       @relation(fields: [className], references: [name])
  className      String?
}

model Course {
  id      Int       @id @default(autoincrement())
  name    String
  Student Student[]
}

// Model representing the Module table
model Module {
  code           String       @id @db.VarChar(10) // Code as primary key
  name           String       @db.VarChar(100) // Name of the module
  teacherId      String // Foreign key referencing Teacher.uuid
  teacher        Teacher      @relation(fields: [teacherId], references: [id])
  attendance     Attendance[]
  Department     Department?  @relation(fields: [departmentCode], references: [code])
  departmentCode String?
}

// Model representing the Attendance table
model Attendance {
  id         String   @id @default(uuid())
  date       DateTime @default(now())
  present    Boolean
  teacherId  String? // Foreign key referencing Teacher.uuid
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
  studentId  String? // Foreign key referencing Student.uuid
  student    Student? @relation(fields: [studentId], references: [id])
  moduleCode String // Foreign key referencing Module.code
  module     Module   @relation(fields: [moduleCode], references: [code])
}
